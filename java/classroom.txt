CLASSROOM


package com.deloitte.classroom;

public final class Classroom {

	public static int counter;
	public int classId;
	public int getClassId() {
		return classId;
	}

	public void setClassId(int classId) {
		this.classId = classId;
	}


	private String classroomName;
	private  int numberOfsystems;
	private  boolean projector;
	private  boolean ac;
	// int students;
	private String facultyName;
	private  boolean occupied;
	private  boolean facultyAvailability;
	
	static {
			counter=0;	
			System.out.println("Static blk");
	}
	
	@Override
	public String toString() {
		return "Classroom [classroomName=" + classroomName + ", numberOfsystems=" + numberOfsystems + ", projector="
				+ projector + ", ac=" + ac + ", facultyName=" + facultyName + ", occupied=" + occupied
				+ ", facultyAvailability=" + facultyAvailability + ", classroomId=" + classroomId + "]";
	}


	private  int classroomId;
	
	
	//deafult constructor
	
	Classroom()
	{
		counter++;
		System.out.println("No.of rooms added:"+counter);

		
	}
	
	public int getClassroomId() {
		return classroomId;
	}

	
	public void setClassroomId(int classroomId) {
		this.classroomId = classroomId;
	}
	

	public String getClassroomName() {
		return classroomName;
	}

	
	public void setClassroomName(String classroomName) {
		this.classroomName = classroomName;
	}
	

	public int getNumberOfsystems() {
		return numberOfsystems;
	}

	
	public void setNumberOfsystems(int numberOfsystems) {
		this.numberOfsystems = numberOfsystems;
	}

	
	public boolean isProjector() {
		return projector;
	}

	
	public void setProjector(boolean projector) {
		this.projector = projector;
	}
	

	public boolean isAc() {
		return ac;
	}

	
	public void setAc(boolean ac) {
		this.ac = ac;
	}

	
	public String getFacultyName() {
		return facultyName;
	}

	
	public void setFacultyName(String facultyName) {
		this.facultyName = facultyName;
	}
	

	public boolean isOccupied() {
		return occupied;
	}

	
	public void setOccupied(boolean occupied) {
		this.occupied = occupied;
	}

	
	public boolean isFacultyAvailability() {
		return facultyAvailability;
	}
	

	public void setFacultyAvailability(boolean facultyAvailability) {
		this.facultyAvailability = facultyAvailability;
	}

}








CLASSROOMdEMO
package com.deloitte.classroom;

import java.util.*;

public class ClassroomDemo {

	public static void main(String args[]) {

		Scanner sc = new Scanner(System.in);
		Classroom[] room = null;
		Class_intrfc_implement ci=new Class_intrfc_implement();
while(true) {
		System.out.println("Choose any one option"+ "1.Add mew room" + "2.Fetch Room Details" + "3.Display all room" + "4.Allocate the room" + "5.exit");

		String option = sc.next();
		int search=0;

		switch (option) {

		case "1":
			System.out.println("please enter total no:of rooms");
			
			String noOfRooms = sc.next();
			room = new Classroom[Integer.parseInt(noOfRooms)];

			for (int i = 0; i < room.length; i++) {
				System.out.println("Enter id");
				String id = sc.next();
				System.out.println("Enter classroom name");
				String name = sc.next();
				System.out.println("Enter no. of systems");
				String systems = sc.next();
				System.out.println("Projector available?:");
				String projector = sc.next();
				System.out.println("Ac available:");
				String ac = sc.next();
				
									
			room[i] = ci.addRooms(noOfRooms, id, name, systems, projector, ac);

			}
			break;
			
			
		case "2": 
		System.out.println("Please enter the Classroom Id:");
		search= sc.nextInt();
		Classroom details=ci.searchRooms(search);
		System.out.println(details);
		break;
					
		case "3": 
			Classroom rooms=ci.displayAllRooms();
			System.out.println(rooms);
			break;
			
		case "4":
			System.out.println("Required no. of systems:");
			int req_sys=sc.nextInt();
			System.out.println("Required no. of systems:");
			int noRoomsNeeded;
			int counter=0;
			Classroom[] avaRooms=ci.avaRooms(req_sys, room);
			for(Classroom avaRoom : avaRooms) {
			for(Classroom juno:avaRooms) {
				if(avaRooms)
				System.out.println("Faculty Name:");
				String fac_name=sc.next();
				juno.setFacultyName(fac_name);
				juno.setFacultyAvailability(false);
			}}
		
		counter++;
		if (counter >= (noRoomsNeeded)) {
			System.out.println("");
		}
	if(counter == noRoomsNeeded) {
		System.out.println("");
	}

			break;
		case "5":
			System.exit(0);
System.out.println("No. of objects created:"+Classroom.counter);
			// System.out.println(c);
		}
}
	

}

}



iNTERFACE
package com.deloitte.classroom;

public interface Class_intrfc {
	public Classroom addRooms(String noOfRooms, String id, String name, String systems, String projector, String ac);
	public Classroom searchRooms(int roomId);
	public void allocateRoom(int noOfSystem, String fac);
	public Classroom displayAllRooms();
	public Classroom[] avaRooms(int noOfSystems, Classroom[] room);
	
}



INTERFACEimplement
package com.deloitte.classroom;

import java.util.Scanner;

public class Class_intrfc_implement implements Class_intrfc {
	int search=0;
	Scanner sc = new Scanner(System.in);
	Classroom[] room = null;
	
	@Override
	public Classroom addRooms(String noOfRooms, String id, String name,String systems, String projector, String ac) {
		// TODO Auto-generated method stub
		
		room = new Classroom[Integer.parseInt(noOfRooms)];
		
		Classroom c = new Classroom();
		
		c.setClassroomId(Integer.parseInt(id));
		c.setClassroomName(name);
		c.setNumberOfsystems(Integer.parseInt(systems));
		c.setProjector(Boolean.parseBoolean(projector));
		c.setAc(Boolean.parseBoolean(ac));
		c.setOccupied(true);
		return c;
		
	}

	@Override
	public Classroom searchRooms(int roomId) {
		// TODO Auto-generated method stub
		Classroom p = null;
		for (Classroom c : room) {
			
			if(c.getClassroomId()==search)
			{
				 p=c;
			}
		}
		return p;
		
			
	}

	@Override
	public void allocateRoom(int noOfSystem, String fac) {
		// TODO Auto-generated method stub
		for(Classroom c:room) {
			if((c.getNumberOfsystems()>=noOfSystem) && (c.isOccupied()==false)) {
			{
				System.out.println("Details of the allocated room");
				System.out.println(c.getClassroomId());
				System.out.println(c.getClassroomName());
				c.setFacultyName(fac);
				System.out.println(c.getFacultyName());
				c.setOccupied(true);
				}}else
				System.out.println("No classes meet the requirement");
			
			}
		
		
	}

	@Override
	public Classroom displayAllRooms() {
		// TODO Auto-generated method stub
		Classroom p=null;
		int i=0;
		for (Classroom c : room) {
			p=c;
			
		}
		return p;
	
	}

	@Override
	public Classroom[] avaRooms(int noOfSystems, Classroom[] room) {
		// TODO Auto-generated method stub
		Classroom[] avaRooms =new Classroom[10];
		int i=0;
		for(Classroom juno:room) {
			if(juno.getNumberOfsystems()>=noOfSystems && juno.isOccupied()==false) {
				avaRooms[i]=juno;
				i++;
			}
		}
		return null;
	}

	
	
}



